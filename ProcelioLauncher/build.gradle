import java.nio.file.Files
import java.nio.file.StandardCopyOption

group 'procul.studios'
version 'main'

apply plugin: 'java'

apply plugin: 'com.github.johnrengelman.shadow'

ext {
    moduleName = 'ps.ProcelioLauncher'
    mainClassName = 'procul.studios.ProcelioLauncher'
    newModuleInfo = 'module-info.java'
    osMap = [linux: '/usr/lib/jvm/java-10-oracle', windows: '/usr/lib/jvm/java-10-windows']
    jdkHome = System.properties.'java.home'
}

compileJava {
    sourceCompatibility = 1.9
    targetCompatibility = 1.9
}


repositories {
    mavenCentral()
}

dependencies {
    //Binary Diffing Library
    compile group: 'io.sigpipe', name:'jbsdiff', version: '1.0'

    //POJOs
    compile project(":ProcelioCommon")

    //Making HTTP Requests
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'

    //Unit Testing
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1' }
}

shadowJar {
    baseName = 'ProcelioLauncher'
    classifier = null
    version = null
    manifest {
        attributes 'Main-Class': project.ext.mainClassName
    }
}



//https://www.javaworld.com/article/2073479/searching-jar-files-with-groovy.html
//http://mail.openjdk.java.net/pipermail/jigsaw-dev/2016-July/008559.html

task compileModuleInfo(dependsOn: project.tasks.shadowJar) {
    project.ext.sourceModuleInfo = project.projectDir.absolutePath + File.separator + project.ext.newModuleInfo
    inputs.files sourceModuleInfo
    project.ext.buildModuleInfo = "${temporaryDir}/module-info.java"
    project.ext.compModuleInfo = "${temporaryDir}/module-info.class"
    outputs.files project.ext.buildModuleInfo, project.ext.compModuleInfo

    doLast {
        Files.copy(file(project.ext.sourceModuleInfo).toPath(), file(project.ext.buildModuleInfo).toPath(), StandardCopyOption.REPLACE_EXISTING)
        exec {
            executable project.ext.jdkHome + "/bin/" + "javac"
            args = ['--patch-module', project.ext.moduleName + "=" + shadowJar.archivePath, project.ext.buildModuleInfo]
        }
    }
}

task transformJar(type: Jar, dependsOn: tasks.compileModuleInfo) {
    from zipTree(shadowJar.archivePath).matching {
        exclude 'module-info.class'
    }
    from file(project.ext.compModuleInfo)
    destinationDir = file(project.buildDir.path + '/jlink')
    baseName = 'ProcelioLauncher'
    classifier = 'jlink'
    version = null
    manifest = shadowJar.manifest
}

task imageJre(dependsOn: tasks.transformJar) {

    project.ext.osMap.each {
        k, v -> outputs.dir "${buildDir}/jre-image-${k}"
    }
    inputs.dir project.libsDir

    doLast {
        project.ext.osMap.each {
            k, v -> imageOS(k, v)
        }
    }
}

def imageOS(String os, String jmodsDir) {
    def outputDir = file("${buildDir}/jre-image-${os}")
    delete outputDir
    exec {
        executable project.ext.jdkHome + "/bin/" + "jlink"
        args = ['--module-path', ["${jmodsDir}/jmods", transformJar.archivePath.absolutePath].join(File.pathSeparator),
                '--add-modules', project.ext.moduleName,
                '--launcher', 'launch=' + project.ext.moduleName + '/' + project.ext.mainClassName,
                '--output', outputDir,
                '--compress=2', '--strip-debug'
        ]
        logger.lifecycle commandLine.join(' ')
    }
    // fix non-writable files in legal/
    /*exec {
        executable 'chmod'
        args = ['u+w', '-R', customJreOutput]
    }*/
}

task packageLauncher(dependsOn: transformJar) {
    inputs.dir transformJar.archivePath
    def outputDir = buildDir.path + "/packages"
    outputs.dir outputDir
    doLast {
        exec {
            executable 'javapackager'
            args = ['-deploy',
                    '-native', 'installer',
                    '-outdir', outputDir,
                    '-name', project.name,
                    '--module-path', [project.jdkHome + "/jmods", transformJar.archivePath.parent].join(File.pathSeparator),
                    '-m', 'ps.ProcelioLauncher/procul.studios.ProcelioLauncher'
            ]
        }
    }
}

task execute(type:JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

task dependentsList() {
    doLast {
        configurations.compile.getResolvedConfiguration().getFirstLevelModuleDependencies().each {
            recursivePrint(it, 0)
        }
    }
}

def recursivePrint(ResolvedDependency dep, int level) {
    level.times { print '\t'}
    dep.getModuleArtifacts().each {
        print it
        print '\t'
    }
    println()
    dep.children.each { recursivePrint(it, level + 1)}
}
