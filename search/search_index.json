{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Binary Representations/","text":"Binary Representations Garages bytes description 4 Number of Robots n Array of Garage Slots Garage Slot bytes description 4 Garage Slot Number n Robot Robot bytes description 4 Magic Number: 0xC571B040 4 Save Format Version 8 Blank (Reserved for Metadata) 1 Name String Length n Name String (UTF-8) 4 Number of Parts n Array of Parts 16 128-bit MD5 Checksum of Rest Part bytes description 1 X Position 1 Y Position 1 Z Position 1 Rotation 1 Red Color Component 1 Blue Color Component 1 Green Color Component 2 Part ID Inventory bytes description 4 Magic Number: 0x10E10CBA 4 Version 4 Number of Entries n Array of Entries Entry bytes description 2 Part ID 4 Part Quantity Stat File bytes description 4 Magic Number: 0x1EF1A757 4 Version 4 Number of Blocks n Array of Blocks Block bytes description 2 Part ID 1 Number of Flags n Array of Flags Flag bytes description 1 Flag Type 4 Flag Value","title":"Binary Representations"},{"location":"Binary Representations/#binary-representations","text":"","title":"Binary Representations"},{"location":"Binary Representations/#garages","text":"bytes description 4 Number of Robots n Array of Garage Slots","title":"Garages"},{"location":"Binary Representations/#garage-slot","text":"bytes description 4 Garage Slot Number n Robot","title":"Garage Slot"},{"location":"Binary Representations/#robot","text":"bytes description 4 Magic Number: 0xC571B040 4 Save Format Version 8 Blank (Reserved for Metadata) 1 Name String Length n Name String (UTF-8) 4 Number of Parts n Array of Parts 16 128-bit MD5 Checksum of Rest","title":"Robot"},{"location":"Binary Representations/#part","text":"bytes description 1 X Position 1 Y Position 1 Z Position 1 Rotation 1 Red Color Component 1 Blue Color Component 1 Green Color Component 2 Part ID","title":"Part"},{"location":"Binary Representations/#inventory","text":"bytes description 4 Magic Number: 0x10E10CBA 4 Version 4 Number of Entries n Array of Entries","title":"Inventory"},{"location":"Binary Representations/#entry","text":"bytes description 2 Part ID 4 Part Quantity","title":"Entry"},{"location":"Binary Representations/#stat-file","text":"bytes description 4 Magic Number: 0x1EF1A757 4 Version 4 Number of Blocks n Array of Blocks","title":"Stat File"},{"location":"Binary Representations/#block","text":"bytes description 2 Part ID 1 Number of Flags n Array of Flags","title":"Block"},{"location":"Binary Representations/#flag","text":"bytes description 1 Flag Type 4 Flag Value","title":"Flag"},{"location":"Patch File Format/","text":"Patch Archive Structure Patches are distributed as .zip archives. They should be named diff-a.a.a-b.b.b.zip where the patch transitions the file tree from version a.a.a to version b.b.b . They consist of a package manifest, which is always the first zip entry in the archive, and then a series of entries which correspond to changed files in the file tree. Package Manifests The package manifest is the first entry in a package archive. It is always a file named manifests.json , and is a json file which holds various information about a patch. It is laid out in this form: public List<String> filesAndHashes; public List<String> ignore; public List<String> delete; public Integer[] toVersion; public Integer[] fromVersion; public String newExec; filesAndHashes is a list of every file contained in the patch (except for the manifest), and the md5 hash (represented as a Hex string) for the file after it has been patched. After patching has finished, it is recommended to check the hash of the file. If it had been modified by the user before patching, there was a network inconsistency, or a filesystem error, this will catch it. If the hashes don't match, a client can download a fresh copy from the patch server. ignore is a list of files that should not be touched by the patcher under any circumstances, usually configuration files that differ from install to install and should not be patched. delete is a list of files that should be removed from the file tree when patching. toVersion is the version the file tree will be even with once this patch is applied. fromVersion is the version the file tree should be even with when applying this patch. If this is not accurate the file tree will almost definitely be corrupted. newExec is the file that should be set as the exec in the manifest.json of the file tree after patching. This is only present if the file tree is executable. Package Entries There are two types of entries present in the package archive after the manifest. File entries and patch entries. Patch entries are denoted by the .patch extension, and every other entry is a file entry. Patch Entries Zip entries in the package archive with the file extension .patch are patch entries. These entries contain the binary patch data that should be fed into bsdiff Patch along with the original file. The structure of these files is as follows: bytes description 1..4 int block_length Block (length of z) 1..4 int block_data_length 5..z byte[] block_data End Block block N block_data is the patch data that corresponds to block N of the original file. File Entries File entries exist when there is a new file to add to the path or the a patch for the existing file is larger the new file itself. Therefore, these should be extracted into the file tree, overwriting anything currently at that path.","title":"Patch File Format"},{"location":"Patch File Format/#patch-archive-structure","text":"Patches are distributed as .zip archives. They should be named diff-a.a.a-b.b.b.zip where the patch transitions the file tree from version a.a.a to version b.b.b . They consist of a package manifest, which is always the first zip entry in the archive, and then a series of entries which correspond to changed files in the file tree.","title":"Patch Archive Structure"},{"location":"Patch File Format/#package-manifests","text":"The package manifest is the first entry in a package archive. It is always a file named manifests.json , and is a json file which holds various information about a patch. It is laid out in this form: public List<String> filesAndHashes; public List<String> ignore; public List<String> delete; public Integer[] toVersion; public Integer[] fromVersion; public String newExec; filesAndHashes is a list of every file contained in the patch (except for the manifest), and the md5 hash (represented as a Hex string) for the file after it has been patched. After patching has finished, it is recommended to check the hash of the file. If it had been modified by the user before patching, there was a network inconsistency, or a filesystem error, this will catch it. If the hashes don't match, a client can download a fresh copy from the patch server. ignore is a list of files that should not be touched by the patcher under any circumstances, usually configuration files that differ from install to install and should not be patched. delete is a list of files that should be removed from the file tree when patching. toVersion is the version the file tree will be even with once this patch is applied. fromVersion is the version the file tree should be even with when applying this patch. If this is not accurate the file tree will almost definitely be corrupted. newExec is the file that should be set as the exec in the manifest.json of the file tree after patching. This is only present if the file tree is executable.","title":"Package Manifests"},{"location":"Patch File Format/#package-entries","text":"There are two types of entries present in the package archive after the manifest. File entries and patch entries. Patch entries are denoted by the .patch extension, and every other entry is a file entry.","title":"Package Entries"},{"location":"Patch File Format/#patch-entries","text":"Zip entries in the package archive with the file extension .patch are patch entries. These entries contain the binary patch data that should be fed into bsdiff Patch along with the original file. The structure of these files is as follows: bytes description 1..4 int block_length Block (length of z) 1..4 int block_data_length 5..z byte[] block_data End Block block N block_data is the patch data that corresponds to block N of the original file.","title":"Patch Entries"},{"location":"Patch File Format/#file-entries","text":"File entries exist when there is a new file to add to the path or the a patch for the existing file is larger the new file itself. Therefore, these should be extracted into the file tree, overwriting anything currently at that path.","title":"File Entries"},{"location":"User-Server Endpoints/","text":"User-Server Endpoints Errors These errors may occur at any point and should be handled appropriately. - 401 -> You may be missing the correct Authentication. - 500 -> There was a server side error, display a comforting error to the end user. Authentication Bearer Token The OAuth2 bearer token can be obtained by logging in with the Authenticate endpoint. It must be attached to every authenticated request under the header Authorization , in the form Bearer <token> . Server Bearer Token The server has a static Token that is known to be owned by the server. Client Endpoints Server Status /status - GET Gives the current status of the server. Response: Json (procul.studios.pojo.response.Message) Create User /users - POST Creates a new user. Request: Json (procul.studios.pojo.request.Authenticate) Errors 400 -> Missing Arguments 409 -> Username already exists Response: Json (procul.studios.pojo.response.Message) Authenticate /login - POST Logs in and obtains an OAuth2 access token. Request: Json (procul.studios.pojo.request.Authenticate) Errors 400 -> Missing Arguments 401 -> Username or Password incorrect Response: Json (procul.studios.pojo.response.Token) Get My User /users/me - GET Gets information about your user. Errors 404 -> UserId doesn't exist Response: Json (procul.studios.pojo.response.User) field: (avatar) only present if exists Authorization: Bearer Token Get a User /users/{userId} - GET Gets information about a user. Errors 404 -> UserId doesn't exist Response: Json (procul.studios.pojo.response.User) field: (avatar) only present if exists Authorization: Bearer Token Get a User's Avatar /users/{userId}/avatar - GET Gets a user's avatar Errors 404 -> The user doesn't have an avatar Response: Binary (PNG) 128x128 Authentication: Bearer Token Set my Avatar /users/me/avatar - POST Sets your avatar Request: Binary (Image) Errors 400 -> The image is provided in an unrecognized format 403 -> Tried to set an avatar that isn't yours Response: Json (procul.studios.pojo.response.User) includes fields: (id, avatar) Authentication: Bearer Token Purchase Blocks /purchase - POST Purchases some blocks Request: Binary (Inventory) Map of BlockID, Quantity to Purchase Negative Quantity sells Errors 400 -> Inventory Body is invalid 409 -> The user doesn't have enough currency or items Can display message to user via (procul.studios.pojo.response.Message) Response: Json (procul.studios.pojo.response.User) Includes fields: (currency, inventory) Authentication: Bearer Token Create Robot /users/me/robots - POST Creates a new garage slot Request: Json (procul.studios.pojo.RobotInfo) only allows field: (name) Errors 400 -> Missing arguments 403 -> Tried to create for a user that isn't you Response: Json (procul.studios.pojo.RobotInfo) Authentication: Bearer Token Delete Robot /users/me/robots/{garageSlot} - DEL Deletes a Robot Errors 400 -> {garageSlot} isn't a valid integer 403 -> Tried to delete a robot that isn't yours 404 -> Robot doesn't exist Response: Json (procul.studios.pojo.response.Message) Authentication: Bearer Token Edit Robot /users/me/robots/{garageSlot} - PATCH Edits a Robot Request: Json (procul.studios.pojo.Robot) Errors 400 -> {garageSlot} isn't a valid integer 403 -> Tried to delete a robot that isn't yours 404 -> Robot doesn't exist Response: Json (procul.studios.pojo.response.User) Authentication: Bearer Token Edit Credentials /users/me - PATCH Edits your username and/or password Request: Json (procul.studios.pojo.request.Authenticate) Errors 401 -> Old credentials are incorrect 409 -> Username is already taken Response: Json (procul.studios.pojo.response.Message) Authentication: Bearer Token Old username provided in header named X-Username Old password provided in header named X-Username Old credentials provided in headers, new credentials in the request body. Either new credentials may be left null. Get Robots /users/me/robots - GET Gets a list of robots for a user Errors 400 -> Requested user id isn't valid 404 -> Requested user doesn't exist Response: Json (procul.studios.pojo.RobotInfo) Array Authentication: Bearer Token Get Robot /users/me/robots - GET Gets the binary representation of a robot Errors 400 -> Requested garageSlot isn't valid 404 -> Requested garageSlot doesn't exist Response: Binary (Robot) Authentication: Bearer Token Get Inventory /users/me/inventory - GET Gets the users current inventory Response: Binary (Inventory) Authentication: Bearer Token Get Statfile Hash /statfile/hash - GET Gets the MD5 hash of the current statfile Response: Json (procul.studios.pojo.response.Message) Authentication: Bearer Token Get Statfile /statfile - GET Gets the binary representation of the current statfile Response: Binary (Stat File) Authentication: Bearer Token Server Endpoints Validate User Token /validate - GET Ensures that a token is valid and matches the user. Request: Attach the user token in a header named X-User-Token Errors 400 -> Missing Token Header 404 -> User or Token does not exist and is not valid Response: Json (procul.studios.pojo.response.User) Only the field: (id) is filled Authentication: Server Bearer Token Rewards /reward - POST Gives users rewards at the end of a match Request: Json (procul.studios.pojo.response.User) only fill fields: (id, currency, xp) currency and xp are the amount to add to the users current amount Response: Json (procul.studios.pojo.response.Message) Authentication: Server Bearer Token","title":"User Server Endpoints"},{"location":"User-Server Endpoints/#user-server-endpoints","text":"","title":"User-Server Endpoints"},{"location":"User-Server Endpoints/#errors","text":"These errors may occur at any point and should be handled appropriately. - 401 -> You may be missing the correct Authentication. - 500 -> There was a server side error, display a comforting error to the end user.","title":"Errors"},{"location":"User-Server Endpoints/#authentication","text":"","title":"Authentication"},{"location":"User-Server Endpoints/#bearer-token","text":"The OAuth2 bearer token can be obtained by logging in with the Authenticate endpoint. It must be attached to every authenticated request under the header Authorization , in the form Bearer <token> .","title":"Bearer Token"},{"location":"User-Server Endpoints/#server-bearer-token","text":"The server has a static Token that is known to be owned by the server.","title":"Server Bearer Token"},{"location":"User-Server Endpoints/#client-endpoints","text":"","title":"Client Endpoints"},{"location":"User-Server Endpoints/#server-status-status-get","text":"Gives the current status of the server. Response: Json (procul.studios.pojo.response.Message)","title":"Server Status /status - GET"},{"location":"User-Server Endpoints/#create-user-users-post","text":"Creates a new user. Request: Json (procul.studios.pojo.request.Authenticate) Errors 400 -> Missing Arguments 409 -> Username already exists Response: Json (procul.studios.pojo.response.Message)","title":"Create User /users - POST"},{"location":"User-Server Endpoints/#authenticate-login-post","text":"Logs in and obtains an OAuth2 access token. Request: Json (procul.studios.pojo.request.Authenticate) Errors 400 -> Missing Arguments 401 -> Username or Password incorrect Response: Json (procul.studios.pojo.response.Token)","title":"Authenticate /login - POST"},{"location":"User-Server Endpoints/#get-my-user-usersme-get","text":"Gets information about your user. Errors 404 -> UserId doesn't exist Response: Json (procul.studios.pojo.response.User) field: (avatar) only present if exists Authorization: Bearer Token","title":"Get My User /users/me - GET"},{"location":"User-Server Endpoints/#get-a-user-usersuserid-get","text":"Gets information about a user. Errors 404 -> UserId doesn't exist Response: Json (procul.studios.pojo.response.User) field: (avatar) only present if exists Authorization: Bearer Token","title":"Get a User /users/{userId} - GET"},{"location":"User-Server Endpoints/#get-a-users-avatar-usersuseridavatar-get","text":"Gets a user's avatar Errors 404 -> The user doesn't have an avatar Response: Binary (PNG) 128x128 Authentication: Bearer Token","title":"Get a User's Avatar /users/{userId}/avatar - GET"},{"location":"User-Server Endpoints/#set-my-avatar-usersmeavatar-post","text":"Sets your avatar Request: Binary (Image) Errors 400 -> The image is provided in an unrecognized format 403 -> Tried to set an avatar that isn't yours Response: Json (procul.studios.pojo.response.User) includes fields: (id, avatar) Authentication: Bearer Token","title":"Set my Avatar /users/me/avatar - POST"},{"location":"User-Server Endpoints/#purchase-blocks-purchase-post","text":"Purchases some blocks Request: Binary (Inventory) Map of BlockID, Quantity to Purchase Negative Quantity sells Errors 400 -> Inventory Body is invalid 409 -> The user doesn't have enough currency or items Can display message to user via (procul.studios.pojo.response.Message) Response: Json (procul.studios.pojo.response.User) Includes fields: (currency, inventory) Authentication: Bearer Token","title":"Purchase Blocks /purchase - POST"},{"location":"User-Server Endpoints/#create-robot-usersmerobots-post","text":"Creates a new garage slot Request: Json (procul.studios.pojo.RobotInfo) only allows field: (name) Errors 400 -> Missing arguments 403 -> Tried to create for a user that isn't you Response: Json (procul.studios.pojo.RobotInfo) Authentication: Bearer Token","title":"Create Robot /users/me/robots - POST"},{"location":"User-Server Endpoints/#delete-robot-usersmerobotsgarageslot-del","text":"Deletes a Robot Errors 400 -> {garageSlot} isn't a valid integer 403 -> Tried to delete a robot that isn't yours 404 -> Robot doesn't exist Response: Json (procul.studios.pojo.response.Message) Authentication: Bearer Token","title":"Delete Robot /users/me/robots/{garageSlot} - DEL"},{"location":"User-Server Endpoints/#edit-robot-usersmerobotsgarageslot-patch","text":"Edits a Robot Request: Json (procul.studios.pojo.Robot) Errors 400 -> {garageSlot} isn't a valid integer 403 -> Tried to delete a robot that isn't yours 404 -> Robot doesn't exist Response: Json (procul.studios.pojo.response.User) Authentication: Bearer Token","title":"Edit Robot /users/me/robots/{garageSlot} - PATCH"},{"location":"User-Server Endpoints/#edit-credentials-usersme-patch","text":"Edits your username and/or password Request: Json (procul.studios.pojo.request.Authenticate) Errors 401 -> Old credentials are incorrect 409 -> Username is already taken Response: Json (procul.studios.pojo.response.Message) Authentication: Bearer Token Old username provided in header named X-Username Old password provided in header named X-Username Old credentials provided in headers, new credentials in the request body. Either new credentials may be left null.","title":"Edit Credentials /users/me - PATCH"},{"location":"User-Server Endpoints/#get-robots-usersmerobots-get","text":"Gets a list of robots for a user Errors 400 -> Requested user id isn't valid 404 -> Requested user doesn't exist Response: Json (procul.studios.pojo.RobotInfo) Array Authentication: Bearer Token","title":"Get Robots /users/me/robots - GET"},{"location":"User-Server Endpoints/#get-robot-usersmerobots-get","text":"Gets the binary representation of a robot Errors 400 -> Requested garageSlot isn't valid 404 -> Requested garageSlot doesn't exist Response: Binary (Robot) Authentication: Bearer Token","title":"Get Robot /users/me/robots - GET"},{"location":"User-Server Endpoints/#get-inventory-usersmeinventory-get","text":"Gets the users current inventory Response: Binary (Inventory) Authentication: Bearer Token","title":"Get Inventory /users/me/inventory - GET"},{"location":"User-Server Endpoints/#get-statfile-hash-statfilehash-get","text":"Gets the MD5 hash of the current statfile Response: Json (procul.studios.pojo.response.Message) Authentication: Bearer Token","title":"Get Statfile Hash /statfile/hash - GET"},{"location":"User-Server Endpoints/#get-statfile-statfile-get","text":"Gets the binary representation of the current statfile Response: Binary (Stat File) Authentication: Bearer Token","title":"Get Statfile /statfile - GET"},{"location":"User-Server Endpoints/#server-endpoints","text":"","title":"Server Endpoints"},{"location":"User-Server Endpoints/#validate-user-token-validate-get","text":"Ensures that a token is valid and matches the user. Request: Attach the user token in a header named X-User-Token Errors 400 -> Missing Token Header 404 -> User or Token does not exist and is not valid Response: Json (procul.studios.pojo.response.User) Only the field: (id) is filled Authentication: Server Bearer Token","title":"Validate User Token /validate - GET"},{"location":"User-Server Endpoints/#rewards-reward-post","text":"Gives users rewards at the end of a match Request: Json (procul.studios.pojo.response.User) only fill fields: (id, currency, xp) currency and xp are the amount to add to the users current amount Response: Json (procul.studios.pojo.response.Message) Authentication: Server Bearer Token","title":"Rewards /reward - POST"}]}