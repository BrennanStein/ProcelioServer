/*
 * This file is generated by jOOQ.
*/
package procul.studios.sqlbindings.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import procul.studios.sqlbindings.DefaultSchema;
import procul.studios.sqlbindings.Indexes;
import procul.studios.sqlbindings.Keys;
import procul.studios.sqlbindings.tables.records.AuthtableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authtable extends TableImpl<AuthtableRecord> {

    private static final long serialVersionUID = -1967715123;

    /**
     * The reference instance of <code>authtable</code>
     */
    public static final Authtable AUTHTABLE = new Authtable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthtableRecord> getRecordType() {
        return AuthtableRecord.class;
    }

    /**
     * The column <code>authtable.ID</code>.
     */
    public final TableField<AuthtableRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>authtable.TOKEN</code>.
     */
    public final TableField<AuthtableRecord, String> TOKEN = createField("TOKEN", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>authtable.USERID</code>.
     */
    public final TableField<AuthtableRecord, Integer> USERID = createField("USERID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>authtable.CLIENTIP</code>.
     */
    public final TableField<AuthtableRecord, String> CLIENTIP = createField("CLIENTIP", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>authtable.EXPIRES</code>.
     */
    public final TableField<AuthtableRecord, Long> EXPIRES = createField("EXPIRES", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>authtable</code> table reference
     */
    public Authtable() {
        this(DSL.name("authtable"), null);
    }

    /**
     * Create an aliased <code>authtable</code> table reference
     */
    public Authtable(String alias) {
        this(DSL.name(alias), AUTHTABLE);
    }

    /**
     * Create an aliased <code>authtable</code> table reference
     */
    public Authtable(Name alias) {
        this(alias, AUTHTABLE);
    }

    private Authtable(Name alias, Table<AuthtableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authtable(Name alias, Table<AuthtableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_AUTHTABLE_1, Indexes.SQLITE_AUTOINDEX_AUTHTABLE_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthtableRecord> getPrimaryKey() {
        return Keys.PK_AUTHTABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthtableRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthtableRecord>>asList(Keys.PK_AUTHTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authtable as(String alias) {
        return new Authtable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authtable as(Name alias) {
        return new Authtable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authtable rename(String name) {
        return new Authtable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authtable rename(Name name) {
        return new Authtable(name, null);
    }
}
