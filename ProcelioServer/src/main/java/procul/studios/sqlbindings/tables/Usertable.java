/*
 * This file is generated by jOOQ.
*/
package procul.studios.sqlbindings.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import procul.studios.sqlbindings.DefaultSchema;
import procul.studios.sqlbindings.Indexes;
import procul.studios.sqlbindings.Keys;
import procul.studios.sqlbindings.tables.records.UsertableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usertable extends TableImpl<UsertableRecord> {

    private static final long serialVersionUID = 1189520272;

    /**
     * The reference instance of <code>usertable</code>
     */
    public static final Usertable USERTABLE = new Usertable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsertableRecord> getRecordType() {
        return UsertableRecord.class;
    }

    /**
     * The column <code>usertable.ID</code>.
     */
    public final TableField<UsertableRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usertable.USERNAME</code>.
     */
    public final TableField<UsertableRecord, String> USERNAME = createField("USERNAME", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>usertable.PASSWORDHASH</code>.
     */
    public final TableField<UsertableRecord, String> PASSWORDHASH = createField("PASSWORDHASH", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>usertable.CURRENCY</code>.
     */
    public final TableField<UsertableRecord, Long> CURRENCY = createField("CURRENCY", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>usertable.LASTLOGIN</code>.
     */
    public final TableField<UsertableRecord, Long> LASTLOGIN = createField("LASTLOGIN", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>usertable.USERTYPEFIELD</code>.
     */
    public final TableField<UsertableRecord, Integer> USERTYPEFIELD = createField("USERTYPEFIELD", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usertable.XP</code>.
     */
    public final TableField<UsertableRecord, Integer> XP = createField("XP", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usertable.INVENTORY</code>.
     */
    public final TableField<UsertableRecord, byte[]> INVENTORY = createField("INVENTORY", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>usertable.ROBOTS</code>.
     */
    public final TableField<UsertableRecord, byte[]> ROBOTS = createField("ROBOTS", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>usertable.AVATAR</code>.
     */
    public final TableField<UsertableRecord, byte[]> AVATAR = createField("AVATAR", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>usertable</code> table reference
     */
    public Usertable() {
        this(DSL.name("usertable"), null);
    }

    /**
     * Create an aliased <code>usertable</code> table reference
     */
    public Usertable(String alias) {
        this(DSL.name(alias), USERTABLE);
    }

    /**
     * Create an aliased <code>usertable</code> table reference
     */
    public Usertable(Name alias) {
        this(alias, USERTABLE);
    }

    private Usertable(Name alias, Table<UsertableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usertable(Name alias, Table<UsertableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_USERTABLE_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsertableRecord> getPrimaryKey() {
        return Keys.PK_USERTABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsertableRecord>> getKeys() {
        return Arrays.<UniqueKey<UsertableRecord>>asList(Keys.PK_USERTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usertable as(String alias) {
        return new Usertable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usertable as(Name alias) {
        return new Usertable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usertable rename(String name) {
        return new Usertable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usertable rename(Name name) {
        return new Usertable(name, null);
    }
}
